Q1
logShuttle2 <- glm(useNum ~ factor(wind) + factor(magn) -1, data=shuttle, family="binomial" )
summary(logShuttle2)
C2 <- exp(logShuttle2$coef)  # take away the log(...) with e
Q2 <- C2[1]/C2[2]  # OR = beta0 / beta1
Q2
library(MASS)
shuttle$useNum <- as.numeric(shuttle$use=='auto')   # num=1 is use is 'auto'
logShuttle1 <- glm(useNum ~ factor(wind) -1, data=shuttle, family="binomial" )
summary(logShuttle1)
C <- exp(logShuttle1$coef)  # take away the log(...) with e
Q1 <- C[1]/C[2]  # OR = headwind / tailwind
Q1
logShuttle2 <- glm(useNum ~ factor(wind) + factor(magn) -1, data=shuttle, family="binomial" )
summary(logShuttle2)
C2 <- exp(logShuttle2$coef)  # take away the log(...) with e
Q2 <- C2[1]/C2[2]  # OR = beta0 / beta1
Q2
?InsectSprays.
?InsectSprays
glm( count ~ factor(spray) , data=InsectSprays, family="poisson")
glm( count ~ factor(spray) -1 , data=InsectSprays, family="poisson")
2.674/2.730
exp(2.674)/exp(2.730)
exp(2.674/2.730)
logfit4 <- glm( count ~ factor(spray) -1 , data=InsectSprays, family="poisson")
exp(logfit4$coef)
logfit4 <- glm( count ~ factor(spray) -1 , data=InsectSprays, family="poisson")
C4 <- exp(logfit4$coef)
Q4 <- C4[1]/C4[2]
Q4
round(Q4,5)
round(Q4,4)
round(Q2,4)
round(Q2,3)
round(Q1,3)
glm(count ~ factor(spray) + 1, family = poisson)
glm(count ~ factor(spray) + 1, data=InsectSprays, family = poisson)
glm(count ~ factor(spray) + (log(10) + 1), data=InsectSprays, family = poisson)
t <- 1
glm(count ~ factor(spray) + offset(t9, data=InsectSprays, family = poisson)
)
glm(count ~ factor(spray) + offset(t), data=InsectSprays, family = poisson)
t <- 0.1
glm(count ~ factor(spray) + offset(t), data=InsectSprays, family = poisson)
t2 <- log(10) + t
glm(count ~ factor(spray) + offset(t2), data=InsectSprays, family = poisson)
t <- 1
t2 <- log(10) + t
glm(count ~  offset(t), data=InsectSprays, family = poisson)
t <- 1
glm(count ~  offset(t), data=InsectSprays, family = poisson)
log(10)
t <- 1
x <- factor(spray)
x <- factor(InsectSprays$spray)
glm(count ~ x + offset(t), data=InsectSprays, family = poisson)
x <- factor(InsectSprays$spray)+ offset(t)
t <- as.factor(1)
x <- factor(InsectSprays$spray)
glm(count ~ x + offset(t), data=InsectSprays, family = poisson)
t <- as.factor(1)
glm(count ~ factor(spray) +  + offset(t), data=InsectSprays, family = poisson)
glm(count ~ factor(spray) +  + factor(offset(t)), data=InsectSprays, family = poisson)
glm(count ~ factor(spray) + factor(offset(t)), data=InsectSprays, family = poisson)
glm(count ~ factor(spray) + 1, data=InsectSprays, family = poisson)
glm(count ~ factor(spray) + 10, data=InsectSprays, family = poisson)
glm(count ~ factor(spray) + 0, data=InsectSprays, family = poisson)
glm(count ~ factor(spray) + log(10), data=InsectSprays, family = poisson)
glm(count ~ factor(spray) + log(10), data=InsectSprays, family = poisson)
glm(count ~ factor(spray) + (log(10)+1), data=InsectSprays, family = poisson)
glm(count ~ factor(spray) + (log(10)+0.1), data=InsectSprays, family = poisson)
log(10)
glm(count ~ factor(spray) + 1, data=InsectSprays, family = poisson)
glm(count ~ factor(spray) + 3.3, data=InsectSprays, family = poisson)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x,y)
n <- 500; x <- seq(0, 4 * pi, length = n); y <- sin(x) + rnorm(n, sd = .3)
knots <- seq(0, 8 * pi, length = 20);
knots
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
View(splineTerms)
View(splineTerms)
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
View(xMat)
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
knots2 <- c(0,1,2,3,4,5,6,7,8,9,10,11)
splineTerms2 <- sapply(knots2, function(knot) (x > knot) * (x - knot))
xMat2 <- cbind(1, x, splineTerms2)
yhat2 <- predict(lm(y ~ xMat2 - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat2, col = "red", lwd = 2)
n <- 500; x <- seq(0, 4 * pi, length = n); y <- sin(x) + rnorm(n, sd = .3)
knots <- seq(0, 8 * pi, length = 20);
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
knots2 <- c(0,2,4,6,8,10)
splineTerms2 <- sapply(knots2, function(knot) (x > knot) * (x - knot))
xMat2 <- cbind(1, x, splineTerms2)
yhat2 <- predict(lm(y ~ xMat2 - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat2, col = "red", lwd = 2)
knots2 <- c(0,6,10)
splineTerms2 <- sapply(knots2, function(knot) (x > knot) * (x - knot))
xMat2 <- cbind(1, x, splineTerms2)
yhat2 <- predict(lm(y ~ xMat2 - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat2, col = "red", lwd = 2)
knot <- 0
n <- length(y)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knot <- 0
n <- length(y)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
glm(yhat ~ x, family="binomial")
glm(yhat ~ x, family="poisson")
lm(yhat ~ x)
x <- x[>0]
x <- x[x>0]
lm(yhat ~ x)
x <- 0:5
y <- c(0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knot <- 0
n <- length(y)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
lm(yhat ~ x)
splineTerms2 <- sapply(knots2, function(knot) (x > knot) * (x - knot))
xMat2 <- cbind(1, x, splineTerms2)
yhat2 <- predict(lm(y ~ xMat2 - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat2, col = "red", lwd = 2)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knot <- 0
n <- length(y)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
lm(yhat ~ x)
summary(lm(yhat ~ x) )
x <- 0:5
y <- c(0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knot <- 0
n <- length(y)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
lm(yhat ~ x)
logShuttle31 <- glm(useNum ~ factor(wind) + factor(magn) -1, data=shuttle, family="binomial" )
summary(logShuttle31)
logShuttle32 <- glm(1 - useNum ~ factor(wind) + factor(magn) -1, data=shuttle, family="binomial" )
summary(logShuttle32)
library(caret)
training <- read.table("./pml-training.csv", header = T, sep = ",")
setwd("~/Cousera/PracticalMachineLearning/Proj1")
training <- read.table("./pml-training.csv", header = T, sep = ",")
testing <- read.table("./pml-testing.csv", header = T, sep = ",")
# Tidy dataset
## select out some columns to remove
Keep <- grep("mean", names(training))           ## Select column containing "mean"
Keep_tmp <- grep("max", names(training))        ## Select column containing "max"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("min", names(training))        ## Select column containing "min"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("avg", names(training))        ## Select column containing "avg"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("sum", names(training))        ## Select column containing "sum"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("var", names(training))        ## Select column containing "var"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("kurtosis", names(training))        ## Select column containing "kurtosis"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("skewness", names(training))        ## Select column containing "skewness"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("stddev", names(training))        ## Select column containing "stddev"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("amplitude", names(training))        ## Select column containing "amplitude"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep <- append(c(3, 4, 6), Keep)              ## append some columns to a single keep list
rm(Keep_tmp)                                    ## remove temp keep list
TidyTraining <- training[, -Keep ]               ## Create a temporary tidy set with selected columns
TidyTesting <- testing[, -Keep ]               ## Create a temporary tidy set with selected columns
dim(TidyTraining); dim(TidyTesting)
TR <- TidyTraining[, 53:57]
Fit2 <- train(classe ~ ., data=TR, method="rf", prox=T)
warnings()
TR <- TidyTraining[, 54:57]
Fit2 <- train(classe ~ ., data=TR, method="rf", prox=T)
inTrain <- createDataPartition(y=TidyTraining$classe, p=0,5, list=F)
inTrain <- createDataPartition(y=TidyTraining$classe, p=0,5, list=F)
inTrain <- createDataPartition(y=training$classe, p=0,5, list=F)
training <- read.data("./pml-training.csv", header = T, sep = ",")
training <- read.csv("./pml-training.csv", header = T, sep = ",")
testing <- read.csv("./pml-testing.csv", header = T, sep = ",")
testing <- read.csv("./pml-testing.csv", header = T, sep = ",")
inTrain <- createDataPartition(y=training$classe, p=0,5, list=F)
inTrain <- createDataPartition(y=training$classe, p=0,5, list=F)
training <- read.csv("./pml-training.csv", header = T, sep = ",")
testing <- read.csv("./pml-testing.csv", header = T, sep = ",")
Keep <- grep("mean", names(training))           ## Select column containing "mean"
Keep_tmp <- grep("max", names(training))        ## Select column containing "max"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("min", names(training))        ## Select column containing "min"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("avg", names(training))        ## Select column containing "avg"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("sum", names(training))        ## Select column containing "sum"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("var", names(training))        ## Select column containing "var"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("kurtosis", names(training))        ## Select column containing "kurtosis"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("skewness", names(training))        ## Select column containing "skewness"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("stddev", names(training))        ## Select column containing "stddev"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("amplitude", names(training))        ## Select column containing "amplitude"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep <- append(c(3, 4, 6), Keep)              ## append some columns to a single keep list
rm(Keep_tmp)                                    ## remove temp keep list
TidyTraining <- training[, -Keep ]
TR <- TidyTraining[, 54:57]
Fit2 <- train(classe ~ ., data=TR, method="rf", prox=T)
Fit_FT <- train(classe ~ ., data=TidyTraining, method="rf", trControl=train_control, ntree=500, tuneLength =1)
training <- read.table("./pml-training.csv", header = T, sep = ",")
testing <- read.table("./pml-testing.csv", header = T, sep = ",")
## select out some columns to remove
Keep <- grep("mean", names(training))           ## Select column containing "mean"
Keep_tmp <- grep("max", names(training))        ## Select column containing "max"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("min", names(training))        ## Select column containing "min"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("avg", names(training))        ## Select column containing "avg"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("sum", names(training))        ## Select column containing "sum"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("var", names(training))        ## Select column containing "var"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("kurtosis", names(training))        ## Select column containing "kurtosis"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("skewness", names(training))        ## Select column containing "skewness"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("stddev", names(training))        ## Select column containing "stddev"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("amplitude", names(training))        ## Select column containing "amplitude"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep <- append(c(3, 4, 6), Keep)              ## append some columns to a single keep list
rm(Keep_tmp)                                    ## remove temp keep list
TidyTraining <- training[, -Keep ]
TR <- TidyTraining[, 54:57]
Fit_FT <- train(classe ~ ., data=TR, method="rf", trControl=train_control, ntree=50, tuneLength =1)
train_control <- trainControl(method="boot", number=2, allowParallel=TRUE)
Fit_FT <- train(classe ~ ., data=TR, method="rf", trControl=train_control, ntree=50, tuneLength =1)
Fit_FT
TR <- TidyTraining[, 40:57]
Fit_FT <- train(classe ~ ., data=TR, method="rf", trControl=train_control, ntree=50, tuneLength =1)
Fit_FT
train_control <- trainControl(method="boot", number=2, allowParallel=TRUE)
TR <- TidyTraining[, 4:57]
Fit_FT <- train(classe ~ ., data=TR, method="rf", trControl=train_control, ntree=100, tuneLength =1)
Fit_FT
TidyTesting <- testing[, -Keep ]               ## Create a temporary tidy set with selected columns
set.seed(1234)
# Filt the model with Radom forrest
train_control <- trainControl(method="boot", number=3, allowParallel=TRUE)
TR <- TidyTraining[, 4:57]
Fit_FT <- train(classe ~ ., data=TR, method="rf", trControl=train_control, ntree=100, tuneLength =1)
Fit_FT
# plotting
#  qplot(classe, predict(Fit_FT, TidyTesting) , data=TidyTraining)
pred <- predict(FIT_FT, TidyTesting)
pred <- predict(Fit_FT, TidyTesting)
TidyTesting$predRight <- pred==TidyTesting$classe
table(pred,TidyTesting$classe)
pred
TidyTesting$predRight
TidyTesting$classe
pred <- predict(Fit_FT, TidyTesting)
pred
inTrain <- createDataPartition(y=TidyTraining$classe, p=0.5, list=F)
train <- TidyTraining[inTrain]
train <- TidyTraining[inTrain]
inTrain <- createDataPartition(y=TidyTraining$classe, p=0.5, list=F)
trainDS <- TidyTraining[inTrain]
testDS <- TidyTraining[inTrain]
train_control <- trainControl(method="boot", number=2, allowParallel=TRUE)
TR <- trainDS[, 4:57]
Fit_FT <- train(classe ~ ., data=TR, method="rf", trControl=train_control, ntree=100, tuneLength =1)
Fit_FT
TR <- trainDS[, 4:57]
Fit_FT <- train(classe ~ ., data=trainDS, method="rf", trControl=train_control, ntree=100, tuneLength =1)
Fit_FT <- train(classe ~ ., data=trainDS, method="rf", trControl=train_control, ntree=100, tuneLength =1)
inTrain <- createDataPartition(y=TidyTraining$classe, p=0.5, list=F)
trainDS <- TidyTraining[inTrain]
testDS <- TidyTraining[inTrain]
#  training
train_control <- trainControl(method="boot", number=3, allowParallel=TRUE)
##TR <- trainDS[, 4:57]
Fit_FT <- train(classe ~ ., data=trainDS, method="rf", trControl=train_control, ntree=100, tuneLength =1)
Fit_FT <- train(classe ~., data=trainDS, method="rf", trControl=train_control, ntree=100, tuneLength =1)
inTrain <- createDataPartition(y=TidyTraining$classe, p=0.5, list=F)
trainDS <- TidyTraining[inTrain]
testDS <- TidyTraining[-inTrain]
train_control <- trainControl(method="boot", number=3, allowParallel=TRUE)
Fit_FT <- train(classe ~ ., data=trainDS, method="rf", trControl=train_control, ntree=100, tuneLength =1)
training <- read.table("./pml-training.csv", header = T, sep = ",")
testing <- read.table("./pml-testing.csv", header = T, sep = ",")
## select out some columns/measures for body means - se ReadMe -
Keep <- grep("mean", names(training))           ## Select column containing "mean"
Keep_tmp <- grep("max", names(training))        ## Select column containing "max"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("min", names(training))        ## Select column containing "min"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("avg", names(training))        ## Select column containing "avg"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("sum", names(training))        ## Select column containing "sum"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("var", names(training))        ## Select column containing "var"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("kurtosis", names(training))        ## Select column containing "kurtosis"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("skewness", names(training))        ## Select column containing "skewness"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("stddev", names(training))        ## Select column containing "stddev"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("amplitude", names(training))        ## Select column containing "amplitude"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep <- append(c(3, 4, 6), Keep)              ## append some columns to a single keep list
rm(Keep_tmp)                                    ## remove temp keep list
TidyTraining <- training[, -Keep ]
inTrain <- createDataPartition(y=TidyTraining$classe, p=0.5, list=F)
trainDS <- TidyTraining[inTrain]
testDS <- TidyTraining[-inTrain]
train_control <- trainControl(method="boot", number=3, allowParallel=TRUE)
##TR <- trainDS[, 4:57]
Fit_FT <- train(classe ~ ., data=trainDS, method="rf", trControl=train_control, ntree=100, tuneLength =1)
str(trainDS)
Fit_FT <- train(classe ~ ., data=trainDS, method="rf", prox=T, trControl=train_control, ntree=100, tuneLength=1)
inTrain <- createDataPartition(y=TidyTraining$classe, p=0.5, list=F)
trainDS <- TidyTraining[inTrain]
testDS <- TidyTraining[-inTrain]
#  training
train_control <- trainControl(method="boot", number=3, allowParallel=TRUE)
##TR <- trainDS[, 4:57]
Fit_FT <- train(classe ~ ., data=trainDS, method="rf", prox=T, trControl=train_control, ntree=100, tuneLength=1)
train(classe ~., data=trainDS, method="rf",prox=T)
trainDS
TidyTraining
inTrain <- createDataPartition(y=TidyTraining$classe, p=0.5, list=F)
trainDS <- TidyTraining[inTrain,]
testDS <- TidyTraining[-inTrain,]
#  training
train_control <- trainControl(method="boot", number=3, allowParallel=TRUE)
##TR <- trainDS[, 4:57]
Fit_FT <- train(classe ~ ., data=trainDS, method="rf", prox=T, trControl=train_control, ntree=100, tuneLength=1)
Fit_FT
pred <- predict(Fit_FT, testDS)
testDS$predRight <- pred==testDS$classe
table(pred,testDS$classe)
View(TidyTraining)
View(TidyTraining)
View(TidyTraining)
pred <- predict(Fit_FT, TidyTesting)
TidyTraining <- training[, -Keep ]    ## Tidying up the trainingset
TidyTesting <- training[, -Keep ]    ## Tidying up the trainingset
TidyTesting <- testing[, -Keep ]    ## Tidying up the trainingset
pred <- predict(Fit_FT, TidyTesting)
pred
confusionMatrix(pred, testDS$classe)
pred <- predict(Fit_FT, testDS)
testDS$predRight <- pred==testDS$classe
table(pred,testDS$classe)
# confusion matrix
confusionMatrix(pred, testDS$classe)
featureplot(x=trainDS, y=trainDS$classe, plot="pairs")
featurePlot(x=trainDS, y=trainDS$classe, plot="pairs")
abs(cor(training[, -57]))
confusionMatrix(pred, testDS$classe)
pred <- predict(Fit_FT, TidyTesting)
pred
# confusion matrix
confusionMatrix(pred, testDS$classe)
confusionMatrix(pred, TidyTesting$classe)
train_control <- trainControl(method="boot", number=3, allowParallel=TRUE)
Fit_FT <- train(classe ~ ., data=trainDS, method="rf", prox=T, trControl=train_control, ntree=100, tuneLength=1, metric = "ROC")
Fit_FT
rm(Keep_tmp); rm(Keep)                    ## remove temp keep list
pred <- predict(Fit_FT, TidyTesting)
pred
# confusion matrix
confusionMatrix(pred, testDS$classe)
pred <- predict(Fit_FT, TidyTesting)
pred
pred <- predict(Fit_FT, testDS)
testDS$predRight <- pred==testDS$classe
table(pred,testDS$classe)
summary(Fit_FT)
Fit_FT$finalModel
## select out some columns/measures for body means - se ReadMe -
Keep <- grep("mean", names(training))           ## Select column containing "mean"
Keep_tmp <- grep("max", names(training))        ## Select column containing "max"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("min", names(training))        ## Select column containing "min"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("avg", names(training))        ## Select column containing "avg"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("sum", names(training))        ## Select column containing "sum"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("var", names(training))        ## Select column containing "var"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("kurtosis", names(training))        ## Select column containing "kurtosis"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("skewness", names(training))        ## Select column containing "skewness"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("stddev", names(training))        ## Select column containing "stddev"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
Keep_tmp <- grep("amplitude", names(training))        ## Select column containing "amplitude"
Keep <- append(Keep, Keep_tmp)                  ## append to a single keep list
#Keep <- append(c(3, 4, 6), Keep)              ## append some columns to a single keep list
TidyTraining <- training[, -Keep ]               ## Create a temporary tidy set with selected columns
rm(Keep_tmp); rm(Keep)
##partision of dataset
inTrain <- createDataPartition(y=TidyTraining$classe, p=0.7, list=F)
trainDS <- TidyTraining[inTrain,]
testDS <- TidyTraining[-inTrain,]
train_control <- trainControl(method="boot", number=3, allowParallel=TRUE)
Fit_FT <- train(classe ~ ., data=trainDS, method="rf", prox=T, trControl=train_control, ntree=100, tuneLength=1, metric = "ROC")
Fit_FT
pred <- predict(Fit_FT, testDS)
testDS$predRight <- pred==testDS$classe
table(pred,testDS$classe)
summary(Fit_FT)
Fit_FT$finalModel
pred <- predict(Fit_FT, TidyTesting)
pred
View(trainDS)
View(trainDS)
View(training)
## select out some columns/measures for body means - se ReadMe -
rm <- grep("mean", names(training))           ## Select column containing "mean"
rm_tmp <- grep("max", names(training))        ## Select column containing "max"
rm <- append(rm, rm_tmp)                  ## append to a single keep list
rm_tmp <- grep("min", names(training))        ## Select column containing "min"
rm <- append(rm, rm_tmp)                  ## append to a single keep list
rm_tmp <- grep("avg", names(training))        ## Select column containing "avg"
rm <- append(rm, rm_tmp)                  ## append to a single keep list
rm_tmp <- grep("sum", names(training))        ## Select column containing "sum"
rm <- append(rm, rm_tmp)                  ## append to a single keep list
rm_tmp <- grep("var", names(training))        ## Select column containing "var"
rm <- append(rm, rm_tmp)                  ## append to a single keep list
rm_tmp <- grep("kurtosis", names(training))        ## Select column containing "kurtosis"
rm <- append(rm, rm_tmp)                  ## append to a single keep list
rm_tmp <- grep("skewness", names(training))        ## Select column containing "skewness"
rm <- append(rm, rm_tmp)                  ## append to a single keep list
rm_tmp <- grep("stddev", names(training))        ## Select column containing "stddev"
rm <- append(rm, rm_tmp)                  ## append to a single keep list
rm_tmp <- grep("amplitude", names(training))        ## Select column containing "amplitude"
rm <- append(rm, rm_tmp)                  ## append to a single keep list
rm <- append(c(1:6), rm)              ## append some columns to a single keep list
TidyTraining <- training[, -rm ]         ## Create a temporary tidy set with selected columns
TidyTesting <- testing[, -rm ]         ## Create a temporary tidy set with selected columns
rm(rm_tmp); rm(rm)
inTrain <- createDataPartition(y=TidyTraining$classe, p=0.7, list=F)
trainDS <- TidyTraining[inTrain,]
testDS <- TidyTraining[-inTrain,]
train_control <- trainControl(method="boot", number=3, allowParallel=TRUE)
Fit_FT <- train(classe ~ ., data=trainDS, method="rf", prox=T, trControl=train_control, ntree=100, tuneLength=1, metric = "ROC")
Fit_FT
pred <- predict(Fit_FT, testDS)
testDS$predRight <- pred==testDS$classe
table(pred,testDS$classe)
Fit_FT <- train(classe ~ ., data=trainDS, method="rf", prox=T, trControl=train_control, ntree=100, tuneLength=1, metric = "ROC")
Fit_FT <- train(classe ~ ., data=trainDS, method="rf", prox=T, trControl=train_control, ntree=100, tuneLength=1)
warnings()
totgrep <- which(grepl("^total", colnames(TidyTraining), ignore.case = F))
totals <- TidyTraining[, totgrep]
featurePlot(x = totals, y = TidyTraining$classe, pch = 19, main = "Feature plot", plot = "pairs")
dim(TidyTraining); dim(TidyTesting)
View(TidyTraining)
pred <- predict(Fit_FT, testDS)
testDS$predRight <- pred==testDS$classe
table(pred,testDS$classe)
train_control <- trainControl(method="boot", number=3, allowParallel=TRUE)
Fit_FT <- train(classe ~ ., data=trainDS, method="rf", prox=T, trControl=train_control, ntree=100, tuneLength=1)
train_control <- trainControl(method="cv", number=3, allowParallel=TRUE)
Fit_FT <- train(classe ~ ., data=trainDS, method="rf", prox=T, trControl=train_control, ntree=100, tuneLength=1)
train_control <- trainControl(method="cv", number=2, allowParallel=TRUE)
Fit_FT <- train(classe ~ ., data=trainDS, method="rf", prox=T, trControl=train_control, ntree=50, tuneLength=1)
